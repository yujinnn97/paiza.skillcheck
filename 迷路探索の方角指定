#include <iostream>
#include<cmath>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
//幅優先探索中に位置情報を管理するために設定
struct Position{
    int x,y;
    string path;
};
int main(){
    int H,W;
    cin>>H>>W;
    vector<string>s(H);
    for(int i=0;i<H;i++){
        cin>>s[i];
    }
    int startX,startY,goalX,goalY;
    for(int i=0;i<H;i++){
        for(int j=0;j<W;j++){
            if(s[i][j]=='S'){
                startX=i;
                startY=j;
            }else if(s[i][j]=='G'){
                goalX=i;
                goalY=j;
            }
        }
    }
    //幅優先探索の準備
    vector<vector<bool>>visited(H,vector<bool>(W,false));
    queue<Position>q;
    q.push({startX,startY,""});
    visited[startX][startY]=true;
    //4方向の移動を定義
    int dx[]={1,-1,0,0};
    int dy[]={0,0,1,-1};
    char directions[]={'D','U','R','L'};
    while(!q.empty()){
        Position current=q.front();
        q.pop();
        if(current.x==goalX&&current.y==goalY){
            cout<<current.path<<endl;
            return 0;
        }
        //4方向に移動を試みる
        for(int i=0;i<4;i++){
            int newX=current.x+dx[i];
            int newY=current.y+dy[i];
            // マップの範囲内かつ訪問していない場所、通過可能な場所
            if (newX >= 0 && newX < H && newY >= 0 && newY < W &&!visited[newX][newY] && s[newX][newY] != '#'){
                visited[newX][newY] = true;
                q.push({newX, newY, current.path + directions[i]});
            }
        }
    }
    cout<<"No path found"<<endl;
    return 0;
}
